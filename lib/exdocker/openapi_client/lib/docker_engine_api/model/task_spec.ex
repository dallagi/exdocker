# NOTE: This file is auto generated by OpenAPI Generator 6.2.1 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule DockerEngineAPI.Model.TaskSpec do
  @moduledoc """
  User modifiable task configuration.
  """

  @derive [Poison.Encoder]
  defstruct [
    :PluginSpec,
    :ContainerSpec,
    :NetworkAttachmentSpec,
    :Resources,
    :RestartPolicy,
    :Placement,
    :ForceUpdate,
    :Runtime,
    :Networks,
    :LogDriver
  ]

  @type t :: %__MODULE__{
    :PluginSpec => DockerEngineAPI.Model.TaskSpecPluginSpec.t | nil,
    :ContainerSpec => DockerEngineAPI.Model.TaskSpecContainerSpec.t | nil,
    :NetworkAttachmentSpec => DockerEngineAPI.Model.TaskSpecNetworkAttachmentSpec.t | nil,
    :Resources => DockerEngineAPI.Model.TaskSpecResources.t | nil,
    :RestartPolicy => DockerEngineAPI.Model.TaskSpecRestartPolicy.t | nil,
    :Placement => DockerEngineAPI.Model.TaskSpecPlacement.t | nil,
    :ForceUpdate => integer() | nil,
    :Runtime => String.t | nil,
    :Networks => [DockerEngineAPI.Model.NetworkAttachmentConfig.t] | nil,
    :LogDriver => DockerEngineAPI.Model.TaskSpecLogDriver.t | nil
  }
end

defimpl Poison.Decoder, for: DockerEngineAPI.Model.TaskSpec do
  import DockerEngineAPI.Deserializer
  def decode(value, options) do
    value
    |> deserialize(:PluginSpec, :struct, DockerEngineAPI.Model.TaskSpecPluginSpec, options)
    |> deserialize(:ContainerSpec, :struct, DockerEngineAPI.Model.TaskSpecContainerSpec, options)
    |> deserialize(:NetworkAttachmentSpec, :struct, DockerEngineAPI.Model.TaskSpecNetworkAttachmentSpec, options)
    |> deserialize(:Resources, :struct, DockerEngineAPI.Model.TaskSpecResources, options)
    |> deserialize(:RestartPolicy, :struct, DockerEngineAPI.Model.TaskSpecRestartPolicy, options)
    |> deserialize(:Placement, :struct, DockerEngineAPI.Model.TaskSpecPlacement, options)
    |> deserialize(:Networks, :list, DockerEngineAPI.Model.NetworkAttachmentConfig, options)
    |> deserialize(:LogDriver, :struct, DockerEngineAPI.Model.TaskSpecLogDriver, options)
  end
end

